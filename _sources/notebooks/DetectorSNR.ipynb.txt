{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tests the detector SNR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is to compare the detector SNR with and without the photon-counting mode. Might as well do this with the shaped pupil."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n",
      "../../../../crispy\n"
     ]
    }
   ],
   "source": [
    "%pylab inline --no-import-all\n",
    "matplotlib.rcParams['image.origin'] = 'lower'\n",
    "matplotlib.rcParams['image.interpolation'] = 'nearest'\n",
    "import sys\n",
    "import os\n",
    "import numpy as np\n",
    "from astropy.io import fits\n",
    "\n",
    "folder = '../../../../crispy'\n",
    "print(folder)\n",
    "if folder not in sys.path: sys.path.append(folder)\n",
    "\n",
    "from crispy.params import Params\n",
    "folder = '../../../crispy'\n",
    "\n",
    "from crispy.tools.initLogger import getLogger\n",
    "log = getLogger('crispy')\n",
    "par = Params()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x10ccc2d50>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1060af850>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load model\n",
    "offaxispsf= '/Users/mrizzo/IFS/OS5/offaxis/spc_offaxis_psf.fits'\n",
    "\n",
    "offaxis = fits.open(offaxispsf)[0].data\n",
    "offaxis = np.sum(offaxis,axis=0)\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(offaxis)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x112dfa8d0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c925f90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# rebin model to reflect real detector sampling\n",
    "from crispy.tools.detutils import frebin\n",
    "currentpix = 0.1 # at 770nm\n",
    "newpix = 0.5*660./770.\n",
    "newshape = (int(offaxis.shape[0]*currentpix/newpix),int(offaxis.shape[1]*currentpix/newpix))\n",
    "offaxis_rebin = frebin(offaxis,newshape)\n",
    "offaxis_rebin /= np.sum(offaxis_rebin)\n",
    "from matplotlib.colors import LogNorm\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(offaxis_rebin,norm=LogNorm(1e-3,0.05))\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Keeping 93.36% of the flux\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1132bd750>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nVFXdW1U3LKIPO1lVvbWqjlTVnevOXVBVt1bVPZPv5y+yjztFVV1SVR+oqk9U1V1V9cbJeeN1ElV1\nblV9tKo+Nhmvn5ucN15TVNWuqvrTqnrP5NhYTVFVn6mqj1fVHVW1MjlnvJi7uRc3VbUryVuSvCbJ\nC5O8vqpeOO9+7HBvS3LlE87dkORQd1+W5NDkmOR4kh/r7hcmeWmSH5r8fTJeJ/d4kld197cmuTzJ\nlVX10hivWd6Y5O51x8Zqtld29+Xr5mIYr3nrns/XDraI5ObFSe7t7k9395eSvDPJVQvox47V3R9K\n8sgTTl+V5MDk84EkV8+1UztUdz/Y3X8y+fyFrP1H6KIYr5PqNY9ODs+efHWM10lV1cVJvifJb6w7\nbaw2x3gxd4sobi5Kcv+648OTc8y2t7sfnHx+KMneRXZmJ6qq/Um+LclHYrymmjxmuSPJkSS3drfx\nmu6XkvxEkvVbvhqr6TrJ+6vq9qq6fnLOeM3VnFKbHZ7cmFD8JNTdXVU7+2/WnFXVM5L8XpIf6e7P\nV9U/tBmvr9Tdq0kur6qvSfKuqnrRE9qNV5Kqem2SI919e1W94mQ/Y6z+kW/v7geq6sIkt1bVJ9c3\nGi/mZRHFzQNJLll3fPHkHLM9XFX7uvvBqtqXtd+6SVJVZ2etsPmd7v79yWnjdQrd/ddV9YGsze8y\nXv/Yy5N8b1V9d5Jzkzyrqn47xmqq7n5g8v1IVb0ra9MQjNc8dZIT3i21iMdStyW5rKqeX1XnJHld\nkoML6MeTzcEk104+X5vk3Qvsy45RaxHNbya5u7vfvK7JeJ1EVe2ZJDapqq9OckWST8Z4/SPd/VPd\nfXF378/av1N/2N3fF2N1UlV1XlU988ufk3xnkjtjvFiAuSc33X28qt6Q5JYku5K8tbvvmnc/drKq\nekeSVyTZXVWHk/xskhuT3FRV1yW5L8k1i+vhjvLyJN+f5OOTeSRJ8tMxXtPsS3JgsmrxrCQ3dfd7\nqurDMV4b5e/Wye3N2mPOZO2/LW/v7pur6rYYr/na4fNh5sHrFwBgEM8++8J+2XP+9VzudfPDv+b1\nCwAA82C1FACMxBMZyQ0AMBbJDQAMo5MTkhvJDQAwFMkNAIyik26b+EluAIChSG4AYCTm3EhuAICx\nSG4AYCT2uZHcAABjkdwAwCi6kxNWS0luAIChSG4AYCTm3EhuAICxSG4AYCBtzo3kBgAYi+IGABiK\nx1IAMIw2oTiSGwBgMJIbABhFx4szI7kBAAYjuQGAkbSl4JIbAGAokhsAGEQnaXNuJDcAwFgkNwAw\nim5zbiK5AQAGI7kBgIGMNuemqr4pyRuT7E5yqLt/7VTXSG4AgG1RVW+tqiNVdecTzl9ZVZ+qqnur\n6oZZf0Z3393dP5jkmiQv38h9JTcAMJKdNefmbUl+NclvfflEVe1K8pYkVyQ5nOS2qjqYZFeSNz3h\n+h/o7iNV9b1J/n2S/7GRmypuAIBt0d0fqqr9Tzj94iT3dvenk6Sq3pnkqu5+U5LXTvlzDiY5WFX/\nO8nbT3VfxQ0ADOIL+atb3t+/u3tOtzu3qlbWHS939/IGrrsoyf3rjg8necm0H66qVyT5V0meluS9\nG+mY4gYABtHdVy66D2dad38wyQc3c40JxQDAPD2Q5JJ1xxdPzp0xihsAYJ5uS3JZVT2/qs5J8rok\nB8/kDRQ3AMC2qKp3JPlwkhdU1eGquq67jyd5Q5Jbktyd5KbuvuuM3rd7rM1+AICnNskNADAUxQ0A\nMBTFDQAwFMUNADAUxQ0AMBTFDQAwFMUNADAUxQ0AMBTFDQAwlP8PHCvhmtPVkA8AAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105ffb0d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "offaxis_rebin[offaxis_rebin<1e-3]=0\n",
    "new_sum = np.sum(offaxis_rebin)\n",
    "print(\"Keeping %2.2f%% of the flux\" % (new_sum*100.))\n",
    "offaxis_rebin /= new_sum\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(offaxis_rebin,norm=LogNorm(1e-3,0.05))\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Construct a matched filter to extract the flux"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Irrespectively of the PSF normalization, let's try to extract the flux within the brightest pixels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1135b82d0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nnJ/kgTXbB5O86tiDquqaJNckyd6ccRK3AwDWJXE5Od19oLsv6e5L9uT0rb4dADCwk0lcHkxy4Zrt\nC2b7AICdYB2XhW5NcnFVvbSqTktyVZIbT021AAB+0gknLt19pKrekeQLSXYnua677150zpN57JEv\n9l/dv2bXeUkeOdE6PMd4VpvjeW2O57VxntXmPNef189u7+066ZXtveU2O6kF6Lr7piQ3beL4n1m7\nXVW3dfclJ1OH5wrPanM8r83xvDbOs9ocz4tTzZL/AMDSsOQ/AIzEdOgtdWCH779MPKvN8bw2x/Pa\nOM9qczwvTqnqwVtmAPBc8YLT9vVrXvzWbbnX5x/449t3YvzSTicuAAAbZowLAIxk8J6UHUlcqury\nqvpGVd1XVdfuRB2mrKquq6qHq+pra/adW1U3V9U3Zz/P2ck6TkVVXVhVX6qqe6rq7qp652y/53Uc\nVbW3qv6lqv5t9rz+cLbf85qjqnZX1b9W1edm257VHFX17ar6alXdWVW3zfZ5XpxS295wqardST6Y\n5A1JXpbkrVX1su2ux8R9NMnlx+y7Nskt3X1xkltm2yRHkry7u1+W5NVJfnf235PndXzPJPmV7v6F\nJK9IcnlVvTqe1yLvTHLvmm3ParFf7u5XrBn74Hltt+7t+eyQnUhcLk1yX3d/q7ufTfLJJFfsQD0m\nq7u/nOS7x+y+Isn1s+/XJ3nztlZqorr7UHffMfv+ZFb/B3N+PK/j6lXfn23umX06ntdxVdUFSX4t\nyZ+t2e1ZbY7nxSm1Ew2X85M8sGb74Gwfi+3r7kOz799Jsm8nKzNFVXVRklcm+Uo8r7lmXR93Jnk4\nyc3d7XnN90dJfi/J2jXUPav5OskXq+r2qrpmts/z2lbblLbsYOJicO4S6u6uqrFHX21SVT0/yaeS\nvKu7n6iq/yjzvH5cdx9N8oqqemGSz1TVzx9T7nklqao3JXm4u2+vqsuOd4xn9RN+qbsfrKoXJbm5\nqr6+ttDz4lTYiYbLg0kuXLN9wWwfiz1UVfu7+1BV7c/qX8skqao9WW20fLy7Pz3b7Xmto7u/V1Vf\nyup4Ks/rJ702ya9X1RuT7E1ydlX9eTyrubr7wdnPh6vqM1kdGuB5badOsjL2SxZ3oqvo1iQXV9VL\nq+q0JFcluXEH6rFsbkxy9ez71Uk+u4N1mYxajVY+kuTe7n7/miLP6ziq6mdmSUuq6nlJXp/k6/G8\nfkJ3/353X9DdF2X136m/7e7fiGd1XFV1ZlWd9aPvSX41ydfieXGKbXvi0t1HquodSb6QZHeS67r7\n7u2ux5RV1SeSXJbkvKo6mOS9Sd6X5IaqenuS+5NcuXM1nJTXJnlbkq/Oxm0kyXviec2zP8n1s9l9\nu5Lc0N2fq6p/iue1Uf7bOr59We16TFb/3/IX3f35qro1ntf2GnwdF0v+A8AgXrDnRf2an37Lttzr\n8w99aEeW/Dc4FwBGMngg4V1FAMDS0HABAJaGriIAGEYnK7qKAAAmQeICAKPopNsCdAAAkyBxAYCR\nGOMCADANEhcAGIkF6AAApkHiAgCj6E5WzCoCAJgEiQsAjMQYFwCAaZC4AMBA2hgXAIBpkLgAwDDa\nGBcAgKnQcAEAloauIgAYRcdLFgEApkLiAgAjadOhAQAmQeICAIPoJG2MCwDANEhcAGAU3ca4AABM\nhYYLAAykV3pbPhtRVZdX1Teq6r6quvY45VVVfzIrv6uqfnG9a2q4AACnXFXtTvLBJG9I8rIkb62q\nlx1z2BuSXDz7XJPkQ+td1xgXABjJdMa4XJrkvu7+VpJU1SeTXJHknjXHXJHkY93dSf65ql5YVfu7\n+9C8i0pcAICtcH6SB9ZsH5zt2+wxP0biAgCDeDKPfeGL/VfnbdPt9lbVbWu2D3T3ga2+qYYLAAyi\nuy/f6Tqs8WCSC9dsXzDbt9ljfoyuIgBgK9ya5OKqemlVnZbkqiQ3HnPMjUl+cza76NVJHl80viWR\nuAAAW6C7j1TVO5J8IcnuJNd1991V9duz8g8nuSnJG5Pcl+TpJL+13nVrdSAvAMD06SoCAJaGhgsA\nsDQ0XACApaHhAgAsDQ0XAGBpaLgAAEtDwwUAWBoaLgDA0vj/gpvmBKGAWUsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1132d3890>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matched_filter = offaxis_rebin/np.sum(offaxis_rebin**2)\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(matched_filter)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# show that we can retrieve the original unity flux from the offaxis_rebin PSF\n",
    "print np.sum(matched_filter*offaxis_rebin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying detector noise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Total number of photons per second in PSF:', 0.063888888888888912)\n",
      "('Total number of photons per frame in noiseless case:', 2.1722222222222234)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x113e20310>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nkvxpknd29xOrna9RAwCciW9294E55Y8kuWrZ/pWzY2s6p6p2Z6lB84Hu/shaKqT7CQBGsn3G1NyT\nZF9VXVNV5yW5McnhU845nORNs1lQ1yX5Xncfq6pK8odJHuju313rV5fUAADnXHefqKq3J7kzyUKS\n27r7vqp666z8liR3JHlNkiNJnk7y5tnlr0zyK0m+XFVfnB37ze6+Y949NWoAYCTbaPG9WSPkjlOO\n3bLscyd522mu+4sktd776X4CAIYgqQGAgZQXWgIATJukBgBGIqkBAJg2SQ0AjKKTbN6KwtuOpAYA\nGIKkBgAGUWmznwAApk6jBgAYgu4nABiJ7icAgGmT1ADASCQ1AADTJqkBgFFYfA8AYPokNQAwEIvv\nAQBMnKQGAEYiqQEAmDZJDQAMoyU1AABTJ6kBgFF0JDUAAFMnqQGAkVhRGABg2jRqAIAh6H4CgIF4\nTQIAwMRJagBgJJIaAIBpk9QAwCg6yaKkBgBg0iQ1ADAML7Q8Y1V1fVU9WFVHqurmc1UpAID1OuOk\npqoWkrwnyc8nOZrknqo63N33n6vKAQDrJKk5I9cmOdLdD3X3s0k+mOTguakWAMD6nM2YmiuSPLxs\n/2iSV5x6UlUdSnIoSfbkgrO4HQCwKknNxunuW7v7QHcf2J3zN/p2AMAOdTZJzSNJrlq2f+XsGACw\nFaxTc8buSbKvqq6pqvOS3Jjk8LmpFgDA+pxxUtPdJ6rq7UnuTLKQ5Lbuvm/eNU/mO9/8ZH/4G8sO\nXZbkm2dahx3Gs1ofz2t9PK+186zWZ6c/r5ds7u066cXNveU2claL73X3HUnuWMf5P7p8v6ru7e4D\nZ1OHncKzWh/Pa308r7XzrNbH82IzeU0CADAEr0kAgJGY0r1lbt3i+0+JZ7U+ntf6eF5r51mtj+fF\npqnewS06ABjJi867vH/6x96wKff6xMO//7ntNl5qq5MaAIBzwpgaABjJDu6B2ZKkpqqur6oHq+pI\nVd28FXXYzqrqtqp6vKq+suzYpVV1V1V9bfbzkq2s43ZRVVdV1aeq6v6quq+q3jE77nmdRlXtqaq/\nrqq/mT2v354d97xWUFULVfWFqvr4bN+zWkFVfb2qvlxVX6yqe2fHPC82zaY3aqpqIcl7ktyQZH+S\nN1TV/s2uxzb3R0muP+XYzUnu7u59Se6e7ZOcSPJr3b0/yXVJ3jb778nzOr1nkvxcd/9Ukpcmub6q\nrovnNc87kjywbN+zmu9nu/uly8ZaeF6brXtztm1oK5Kaa5Mc6e6HuvvZJB9McnAL6rFtdfefJ/n2\nKYcPJrl99vn2JK/b1EptU919rLs/P/v8ZJb+53NFPK/T6iXfn+3unm0dz+u0qurKJK9N8gfLDntW\n6+N5sWm2olFzRZKHl+0fnR1jvsu7+9js86NJLt/KymxHVXV1kpcl+Ww8rxXNulO+mOTxJHd1t+e1\nst9L8utJlq8771mtrJN8sqo+V1WHZsc8r021SSnNNk1qDBSeoO7uqtqe/0Vtkap6QZI/TfLO7n6i\nqv5fmef1/+vuk0leWlUXJ/loVf3kKeWeV5Kq+sUkj3f356rqVac7x7N6jp/p7keq6sVJ7qqqry4v\n9LzYaFvRqHkkyVXL9q+cHWO+x6pqb3cfq6q9WformyRVtTtLDZoPdPdHZoc9r1V093er6lNZGr/l\neT3XK5P8UlW9JsmeJBdV1fvjWa2oux+Z/Xy8qj6apeEGntdm6iSLO/eFllvR/XRPkn1VdU1VnZfk\nxiSHt6AeU3M4yU2zzzcl+dgW1mXbqKVI5g+TPNDdv7usyPM6jar60VlCk6p6fpKfT/LVeF7P0d2/\n0d1XdvfVWfp36s+6+43xrE6rqi6sqhf+8HOSX0jylXhebKJNT2q6+0RVvT3JnUkWktzW3fdtdj22\ns6r6kySvSnJZVR1N8ltJ3pXkQ1X1liTfSPL6ravhtvLKJL+S5MuzcSJJ8pvxvFayN8nts1mIu5J8\nqLs/XlV/Fc9rrfy3dXqXZ6k7M1n6f8sfd/cnquqeeF6ba5uOd9kMXpMAAIN40e4X90//yC9vyr0+\n8dh7t91rEgwUBoCR7OCwwrufAIAhaNQAAEPQ/QQAw+hkUfcTAMCkSWoAYBSddFt8DwBg0iQ1ADAS\nY2oAAKZNUgMAI7H4HgDAtElqAGAU3cmi2U8AAJMmqQGAkRhTAwAwbZIaABhIG1MDADBtkhoAGEYb\nUwMAMHUaNQDAEHQ/AcAoOl5oCQAwdZIaABhJm9INADBpkhoAGEQnaWNqAACmTVIDAKPoNqYGAGDq\nNGoAYCC92JuyrUVVXV9VD1bVkaq6+TTlVVXvnpV/qapevtZrT0ejBgA456pqIcl7ktyQZH+SN1TV\n/lNOuyHJvtl2KMl713HtcxhTAwAj2T5jaq5NcqS7H0qSqvpgkoNJ7l92zsEk7+vuTvKZqrq4qvYm\nuXoN1z6HpAYA2AhXJHl42f7R2bG1nLOWa59DUgMAg3gy37nzk/3hyzbpdnuq6t5l+7d2962bdO/T\n0qgBgEFILNU0AAAAoUlEQVR09/VbXYdlHkly1bL9K2fH1nLO7jVc+xy6nwCAjXBPkn1VdU1VnZfk\nxiSHTznncJI3zWZBXZfke919bI3XPoekBgA457r7RFW9PcmdSRaS3Nbd91XVW2fltyS5I8lrkhxJ\n8nSSN8+7drV71tKAYwCAadP9BAAMQaMGABiCRg0AMASNGgBgCBo1AMAQNGoAgCFo1AAAQ9CoAQCG\n8H8BMUdXuqTaOmUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113bebd50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from crispy.tools.detector import readDetector\n",
    "from crispy.tools.image import Image\n",
    "\n",
    "# Approximate number of photons per IFS cube slice per frame\n",
    "Nphot = 3.45/18 # 18 slices\n",
    "Npix = 3 # suppose that the photons are spread over 3 pixels at IFS detector for each slice\n",
    "\n",
    "\n",
    "img = Image(data=offaxis_rebin*Nphot/Npix)\n",
    "print('Total number of photons per second in PSF:', np.sum(matched_filter*img.data))\n",
    "\n",
    "det_nonoise = readDetector(par,img,inttime=100,nonoise=True)\n",
    "\n",
    "print('Total number of photons per frame in noiseless case:', np.sum(matched_filter*det_nonoise))\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(det_nonoise)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x116053550>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n2Y6q6swk35nkL+J6zTUbTvlMkv1Jru9u12u+30zyc0nWbtHqWs3XST5ZVbdU1SWzY64XS2Oi8AR1\nd1fV9sz+tkhVfXOSP0jyru7+WlX9vzbX6x/q7gNJXlVV35Lk6qp6+bPaXa8kVfVDSfZ39y1Vde7B\nvse1+gav7e77qupFSa6vqjvWNrpey7B9h4aWYSuSmvuSnLHm9emzYyz25ao6NUlmX/dvcX+2jara\nndWC5ve6+6Ozw67XOrr7q0n+OKvzt1yvb/SaJD9cVXdndZj8+6rqd+NazdXd982+7k9ydVanG7he\nLM1WFDU3JTmrql5aVc9J8pYk12xBP6bmmiQXzZ5flORjW9iXbaNWI5nfTnJ7d//6mibX6yCq6pRZ\nQpOqOj7JG5LcEdfrG3T3L3T36d19ZlZ/T/1Rd/9YXKuDqqoTqup5zzxP8sYkt8X1Wq5OsrKynMc2\ntPThp+5+uqremeS6JLuSXNHdn1t2P7azqvpwknOTnFxV9yZ5d5L3JLmqqi5O8qUkF2xdD7eV1yR5\na5JbZ/NEkuQX43rNc2qSK2erEI9JclV3f7yqPhXXa6P82zq4PVkdzkxW/7Z8qLs/UVU3xfViSewo\nDACDeMHuF/V3n/Rvl3KuT3z5sm23o7AbWgIAQ7D6CQBGsoNHYCQ1AMAQJDUAMIxOViQ1AACTJqkB\ngFF00r0995BZBkkNADAESQ0AjMScGgCAaZPUAMBI7FMDADBtihoAYAiGnwBgFN3JiiXdAACTJqkB\ngJGYKAwAMG2SGgAYSJtTAwAwbZIaABhGm1MDADB1khoAGEXHDS0BAKZOUgMAI2mrnwAAJk1SAwCD\n6CRtTg0AwLRJagBgFN3m1AAATJ2iBgAYguEnABiIicIAABMnqQGAkezgicLVO/hungAwkqr6RJKT\nl3S6B7v7vCWda0MUNQDAEMypAQCGoKgBAIagqAEAhqCoAQCGoKgBAIagqAEAhqCoAQCGoKgBAIag\nqAEAhvB/ASoFl2RbAxCIAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114a00ad0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "eff=par.losses*par.PhCountEff*par.pol\n",
    "average = img.data*eff*100\n",
    "average[average==0.0] = 1e-4\n",
    "ave_before = average.copy()\n",
    "beforeEMRegister = average# np.random.poisson(average)\n",
    "average[beforeEMRegister>0] *= np.minimum(np.ones(beforeEMRegister[beforeEMRegister>0].shape),1+par.lifefraction*0.51296*(np.log10(beforeEMRegister[beforeEMRegister>0])+0.0147233))\n",
    "#CTE = np.minimum(np.ones(beforeEMRegister.shape),1+par.lifefraction*0.51296*(np.log10(beforeEMRegister)+0.0147233))\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(ave_before/average)\n",
    "\n",
    "plt.colorbar()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Invalid dimensions for image data",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-f4ab5d5d296e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdet\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Signal: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatched_filter\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdet\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/mrizzo/anaconda/lib/python2.7/site-packages/matplotlib/pyplot.pyc\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, hold, data, **kwargs)\u001b[0m\n\u001b[1;32m   3156\u001b[0m                         \u001b[0mfilternorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilternorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilterrad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilterrad\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3157\u001b[0m                         \u001b[0mimlim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimlim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresample\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3158\u001b[0;31m                         **kwargs)\n\u001b[0m\u001b[1;32m   3159\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3160\u001b[0m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_hold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwashold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/mrizzo/anaconda/lib/python2.7/site-packages/matplotlib/__init__.pyc\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1890\u001b[0m                     warnings.warn(msg % (label_namer, func.__name__),\n\u001b[1;32m   1891\u001b[0m                                   RuntimeWarning, stacklevel=2)\n\u001b[0;32m-> 1892\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1893\u001b[0m         \u001b[0mpre_doc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpre_doc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/mrizzo/anaconda/lib/python2.7/site-packages/matplotlib/axes/_axes.pyc\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)\u001b[0m\n\u001b[1;32m   5116\u001b[0m                               resample=resample, **kwargs)\n\u001b[1;32m   5117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5118\u001b[0;31m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5119\u001b[0m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5120\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/mrizzo/anaconda/lib/python2.7/site-packages/matplotlib/image.pyc\u001b[0m in \u001b[0;36mset_data\u001b[0;34m(self, A)\u001b[0m\n\u001b[1;32m    547\u001b[0m         if (self._A.ndim not in (2, 3) or\n\u001b[1;32m    548\u001b[0m                 (self._A.ndim == 3 and self._A.shape[-1] not in (3, 4))):\n\u001b[0;32m--> 549\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid dimensions for image data\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_imcache\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: Invalid dimensions for image data"
     ]
    },
    {
     "data": {
      "image/png": "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\n+4Jff11Vtyf5x62xBACwV43B1N0nquqGJPck2Zfktu5+rKqu37j/lh2eEQBgpRa5wpTuvjvJ3VvO\nnTSUuvuvX/5YAABnDu/0DQAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwA\nAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPB\nBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAw\nEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwA\nAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPB\nBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAw\nEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwA\nAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPBBAAwEEwAAAPB\nBAAwEEwAAIOFgqmqLq+qJ6rqWFXddJL7P1ZVD1fVI1V1X1VdvPxRAQBWYwymqtqX5OYkVyQ5lOSa\nqjq0ZdmPkvx5d/9xks8lObLsQQEAVmWRK0yXJDnW3U929wtJ7khy1eYF3X1fd/984/D+JOctd0wA\ngNVZJJjOTfL0puPjG+dO5RNJvv1yhgIAOJPsX+YPq6oPZD2YLj3F/YeTHE6SgwcPLvOhAQB2zCJX\nmJ5Jcv6m4/M2zv2GqnpXkluTXNXdPz3ZD+ruI9291t1rBw4cOJ15AQB23SLB9ECSC6vqgqo6K8nV\nSe7avKCqDia5M8nHu/uHyx8TAGB1xqfkuvtEVd2Q5J4k+5Lc1t2PVdX1G/ffkuQzSd6U5MtVlSQn\nuntt58YGANg91d0reeC1tbU+evToSh4bAHhlqqoHT+eijnf6BgAYCCYAgIFgAgAYCCYAgIFgAgAY\nCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYA\ngIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFg\nAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAY\nCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYA\ngIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFg\nAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAY\nCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYA\ngIFgAgAYCCYAgIFgAgAYCCYAgIFgAgAYCCYAgMFCwVRVl1fVE1V1rKpuOsn9VVVf3Lj/4ap69/JH\nBQBYjTGYqmpfkpuTXJHkUJJrqurQlmVXJLlw43Y4yVeWPCcAwMoscoXpkiTHuvvJ7n4hyR1Jrtqy\n5qokX+119yc5u6reuuRZAQBWYpFgOjfJ05uOj2+c2+4aAIA9af9uPlhVHc76U3ZJ8j9V9ehuPj4v\n2zlJnl/1EGyLPdtb7NfeY8/2nneczjctEkzPJDl/0/F5G+e2uybdfSTJkSSpqqPdvbataVkpe7b3\n2LO9xX7tPfZs76mqo6fzfYs8JfdAkgur6oKqOivJ1Unu2rLmriTXbvy13PuT/KK7f3I6AwEAnGnG\nK0zdfaKqbkhyT5J9SW7r7seq6vqN+29JcneSK5McS/KrJNft3MgAALtrodcwdffdWY+izedu2fR1\nJ/nkNh/7yDbXs3r2bO+xZ3uL/dp77Nnec1p7VuutAwDAqfhoFACAwY4Hk49V2XsW2LOPbezVI1V1\nX1VdvIo5WTft16Z1762qE1X1kd2cj9+2yJ5V1WVV9VBVPVZV39vtGflNC/y7+Iaq+lZVfX9jz7yW\nd4Wq6raqevZUb190Wu3R3Tt2y/qLxP8zyR8mOSvJ95Mc2rLmyiTfTlJJ3p/k33dyJrel7NmfJnnj\nxtdX2LMze782rfuXrL8W8SOrnvuVfFvwd+zsJD9IcnDj+M2rnvuVfFtwz/42yec3vj6Q5GdJzlr1\n7K/UW5I/S/LuJI+e4v5tt8dOX2HysSp7z7hn3X1fd/984/D+rL/vFquxyO9YknwqydeTPLubw3FS\ni+zZR5Pc2d1PJUl327fVWmTPOsnrq6qSvC7rwXRid8fk17r73qzvwalsuz12Oph8rMres939+ETW\nK53VGPerqs5N8uH4UOwzxSK/Y29P8saq+m5VPVhV1+7adJzMInv2pSTvTPLjJI8k+XR3v7g743Ea\ntt0eu/rRKPxuqaoPZD2YLl31LLykLyS5sbtfXP/PL3vA/iTvSfLBJK9O8m9VdX93/3C1Y/ESPpTk\noSR/keSPkvxzVf1rd//3asdiWXY6mJb2sSrsmoX2o6releTWJFd09093aTZ+2yL7tZbkjo1YOifJ\nlVV1oru/sTsjssUie3Y8yU+7+5dJfllV9ya5OIlgWo1F9uy6JH/X6y+QOVZVP0pyUZL/2J0R2aZt\nt8dOPyXnY1X2nnHPqupgkjuTfNz/eFdu3K/uvqC739bdb0vyD0n+Riyt1CL/Ln4zyaVVtb+qXpPk\nfUke3+U5+X+L7NlTWb8imKp6S9Y/4PXJXZ2S7dh2e+zoFab2sSp7zoJ79pkkb0ry5Y2rFifah0+u\nxIL7xRlkkT3r7ser6jtJHk7yYpJbu/ukfx7Nzlvw9+xzSW6vqkey/pdXN3b38ysb+hWuqr6W5LIk\n51TV8SSfTfKq5PTbwzt9AwAMvNM3AMBAMAEADAQTAMBAMAEADAQTAMBAMAEADAQTAMBAMAEADP4X\nOWfc38cIQM8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113371050>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "det = readDetector(par,img,inttime=100)\n",
    "N = 999\n",
    "for i in range(N):\n",
    "    det += readDetector(par,img,inttime=100)\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(det/(N+1))\n",
    "plt.colorbar()\n",
    "print(\"Signal: \", np.sum(matched_filter*(det/(N+1))))\n",
    "print(\"Noise: \", np.sum(matched_filter)*np.std(det[:,:30]/(N+1)))\n",
    "print(\"SNR: \",np.sum(matched_filter*(det/(N+1)))/(np.sum(matched_filter)*np.std(det[:,:30]/(N+1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "par.PCmode=False\n",
    "det = readDetector(par,img,inttime=100)\n",
    "N = 999\n",
    "for i in range(N):\n",
    "    det += readDetector(par,img,inttime=100)\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(det/(N+1))\n",
    "plt.colorbar()\n",
    "print(\"Signal: \", np.sum(matched_filter*(det/(N+1))))\n",
    "print(\"Noise: \", np.sum(matched_filter)*np.std(det[:,:30]/(N+1)))\n",
    "print(\"SNR: \",np.sum(matched_filter*(det/(N+1)))/(np.sum(matched_filter)*np.std(det[:,:30]/(N+1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "det_offaxis = Image(\"/Users/mrizzo//IFS/crispy/crispy/OS5/OS5_average/offaxis.fits\")\n",
    "par.PCmode=False\n",
    "det = readDetector(par,det_offaxis,inttime=3600,nonoise=True)\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.imshow(det)\n",
    "plt.colorbar()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Least-squares slice-by-slice scaling between 2 cubes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from crispy.tools.imgtools import bowtie\n",
    "refcube = Image(\"/Users/mrizzo/IFS/crispy/crispy/SimResults/average_ref_star_detector_red_optext.fits\")\n",
    "targetcube = Image(\"/Users/mrizzo/IFS/crispy/crispy/SimResults/average_target_star_detector_red_optext.fits\")\n",
    "ydim,xdim = refcube.data[0].shape\n",
    "mask,junk = bowtie(refcube.data[0],ydim//2,xdim//2,openingAngle=65,\n",
    "            clocking=-par.philens*180./np.pi,IWApix=6*0.77/0.6,OWApix=18*0.77/0.6,\n",
    "            export=None,twomasks=False)\n",
    "\n",
    "refcube.data[np.isnan(refcube.data)]=0.0\n",
    "targetcube.data[np.isnan(targetcube.data)]=0.0\n",
    "res = []\n",
    "vals = np.arange(1,20)\n",
    "for i in range(refcube.data.shape[0]):\n",
    "    refcube.data[i] *= mask\n",
    "    targetcube.data[i] *= mask\n",
    "#     targetcube.data[i] = refcube.data[i].copy()*0.5\n",
    "    refslice = np.reshape(refcube.data[i], (1, -1))\n",
    "    targetslice = np.reshape(refcube.data[i]*vals[i],-1)\n",
    "    res.append(np.linalg.lstsq(refslice.T,targetslice)[0])\n",
    "res=np.array(res).flatten()\n",
    "print res.shape\n",
    "plt.figure(figsize=(10,10))\n",
    "print refcube.data.shape\n",
    "resid = refcube.data*res[:,np.newaxis,np.newaxis]-refcube.data*vals[:,np.newaxis,np.newaxis]\n",
    "plt.imshow(resid[0])\n",
    "plt.colorbar()\n",
    "print res\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Function that offsets an entire cube"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "origcube = Image(\"/Users/mrizzo//IFS/crispy/crispy/OS5/OS5_average/offaxis.fits\")\n",
    "dx = 2\n",
    "dy = 2\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
