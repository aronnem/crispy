{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n",
      "../../../../crispy\n"
     ]
    }
   ],
   "source": [
    "%pylab inline --no-import-all\n",
    "matplotlib.rcParams['image.origin'] = 'lower'\n",
    "matplotlib.rcParams['image.interpolation'] = 'nearest'\n",
    "import sys\n",
    "import os\n",
    "\n",
    "folder = '../../../../crispy'\n",
    "print(folder)\n",
    "if folder not in sys.path: sys.path.append(folder)\n",
    "\n",
    "from crispy.params import Params\n",
    "folder = '../../../crispy'\n",
    "\n",
    "from crispy.tools.initLogger import getLogger\n",
    "log = getLogger('crispy')\n",
    "from crispy.IFS import propagateIFS\n",
    "from crispy.IFS import reduceIFSMap\n",
    "from crispy.tools.postprocessing import process_SPC_IFS,SNR_spectrum\n",
    "from crispy.unitTests import testCreateFlatfield\n",
    "\n",
    "os.chdir(folder)\n",
    "par = Params()\n",
    "par.saveRotatedInput = False\n",
    "par.saveDetector = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Reduced cube will have 44 wavelength bins\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming endpoints wavelist is given\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to ./unitTestsOutputs/flatfield.fits\n"
     ]
    }
   ],
   "source": [
    "testCreateFlatfield(par,useQE=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### reduce flatfield"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Read data from HDU 1 of ./unitTestsOutputs/flatfield.fits\n",
      "crispy - INFO - Reduced cube will have 19 wavelength bins\n",
      "crispy - INFO - Writing data to ./SimResults/flatfield_red_optext.fits\n",
      "crispy - INFO - Elapsed time: 12.971214s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<crispy.tools.image.Image instance at 0x10ebcccb0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduceIFSMap(par,par.unitTestsOutputs+'/flatfield.fits')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Read data from HDU 0 of /Users/mrizzo/IFS/OS5/with_lowfc/os5_spc_001.fits\n",
      "crispy - INFO - Processing file os5_spc_001.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_001_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_002.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 42 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_002_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_003.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_003_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_004.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_004_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_005.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_005_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_006.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_006_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_007.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_007_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_008.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 42 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_008_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_009.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_009_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_010.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 42 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_010_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_011.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_011_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_012.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_012_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_013.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_013_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_014.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_014_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_015.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_015_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_016.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_016_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_017.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_017_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_018.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_018_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_019.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_019_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_020.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_020_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_021.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 43 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_021_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_022.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_022_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_023.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_023_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_024.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 36 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_024_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_025.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_025_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_026.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 36 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_026_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_027.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 43 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_027_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_028.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_028_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_029.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_029_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_030.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_030_refstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_031.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 42 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_031_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_032.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_032_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_033.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_033_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_034.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_034_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_035.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_035_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_036.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_036_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_037.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_037_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_038.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 42 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_038_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_039.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_039_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_040.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_040_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_041.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_041_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_042.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_042_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_043.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_043_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_044.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_044_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_045.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 44 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_045_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_046.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_046_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_047.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 43 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_047_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_048.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_048_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_049.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_049_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_050.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_050_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_051.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_051_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_052.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_052_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_053.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_053_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_054.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_054_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_055.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_055_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_056.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 37 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_056_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_057.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_057_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_058.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_058_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_059.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_059_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_060.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_060_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_061.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_061_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_062.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 41 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_062_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_063.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_063_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_064.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_064_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_065.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_065_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_066.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_066_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_067.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 40 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_067_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_068.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 39 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_068_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_069.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n",
      "crispy - INFO - Number of detector pixels per lenslet: 13.384615\n",
      "crispy - INFO - Rebinning final detector. Image has dimensions 1024x1024\n",
      "crispy - INFO - Done.\n",
      "crispy - INFO - Performance: 38 seconds total\n",
      "crispy - INFO - Writing data to /Users/mrizzo/IFS/OS5//os5_spc_069_targetstar_IFS.fits\n",
      "crispy - INFO - Processing file os5_spc_070.fits\n",
      "crispy - INFO - The number of input pixels per lenslet is 4.285714\n",
      "crispy - INFO - Using PSFlet gaussian approximation\n",
      "crispy - WARNING - Assuming slices are evenly spread in wavelengths\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process Consumer-562:\n",
      "Process Consumer-564:\n",
      "Process Consumer-566:\n",
      "Process Consumer-563:\n",
      "Process Consumer-568:\n",
      "Process Consumer-567:\n",
      "Process Consumer-565:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "    self.run()\n",
      "    self.run()\n",
      "    self.run()\n",
      "    self.run()\n",
      "    self.run()\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "Process Consumer-561:\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 325, in map_coordinates\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 169, in propagateLenslets\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "    output, order, mode, cval, None, None)\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "KeyboardInterrupt\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 309, in map_coordinates\n",
      "Traceback (most recent call last):\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 132, in _geometric_transform\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 309, in map_coordinates\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 307, in map_coordinates\n",
      "    order, mode, cval, extra_arguments, extra_keywords)\n",
      "    coordinates = numpy.asarray(coordinates)\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 325, in map_coordinates\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 174, in propagateLenslets\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 310, in map_coordinates\n",
      "    output, order, mode, cval, None, None)\n",
      "    self.run()\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/numpy/core/numeric.py\", line 482, in asarray\n",
      "    if numpy.iscomplexobj(input):\n",
      "    if numpy.iscomplexobj(coordinates):\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 22, in run\n",
      "KeyboardInterrupt\n",
      "    coordinates = numpy.asarray(coordinates)\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/scipy/ndimage/interpolation.py\", line 132, in _geometric_transform\n",
      "  File \"../../../../crispy/crispy/tools/par_utils.py\", line 31, in __call__\n",
      "    order, mode, cval, extra_arguments, extra_keywords)\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/numpy/lib/type_check.py\", line 269, in iscomplexobj\n",
      "    return array(a, dtype, copy=False, order=order)\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/numpy/core/numeric.py\", line 482, in asarray\n",
      "  File \"/Users/mrizzo/anaconda/lib/python2.7/site-packages/numpy/lib/type_check.py\", line 269, in iscomplexobj\n",
      "KeyboardInterrupt\n",
      "    return issubclass(asarray(x).dtype.type, _nx.complexfloating)\n",
      "    return issubclass(asarray(x).dtype.type, _nx.complexfloating)\n",
      "KeyboardInterrupt\n",
      "    return array(a, dtype, copy=False, order=order)\n",
      "  File \"../../../../crispy/crispy/tools/lenslet.py\", line 170, in propagateLenslets\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-b54d5ab690c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m                 \u001b[0mprocess_detector\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0mtake_averages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m                 parallel=False)\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavetxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexportDir\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\"/signal.txt\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msignal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavetxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexportDir\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\"/noise.txt\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m../../../../crispy/crispy/tools/postprocessing.pyc\u001b[0m in \u001b[0;36mprocess_SPC_IFS\u001b[0;34m(par, psf_time_series_folder, offaxis_psf_filename, planet_radius, planet_AU, planet_dist_pc, ref_star_T, ref_star_Vmag, target_star_T, target_star_Vmag, lamc, BW, n_ref_star_imgs, tel_pupil_area, pp_fact, t_zodi, useQE, subtract_ref_psf, outdir_time_series, outdir_detector, outdir_average, process_cubes, process_offaxis, process_detector, process_noiseless, take_averages, parallel)\u001b[0m\n",
      "\u001b[0;32m../../../../crispy/crispy/IFS.py\u001b[0m in \u001b[0;36mpolychromeIFS\u001b[0;34m(par, wavelist, inputcube, name, parallel, QE, wavelist_endpts, dlambda, lam_arr)\u001b[0m\n",
      "\u001b[0;32m/Users/mrizzo/anaconda/lib/python2.7/multiprocessing/queues.pyc\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    115\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_recv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "os5folder = '/Users/mrizzo/IFS/OS5/with_lowfc'\n",
    "offaxispsf= '/Users/mrizzo/IFS/OS5/offaxis/spc_offaxis_psf.fits'\n",
    "signal,noise,noiseleft = process_SPC_IFS(par,os5folder,offaxispsf,\n",
    "                outdir_time_series = '/Users/mrizzo/IFS/OS5/',outdir_detector='/Users/mrizzo/IFS/OS5/OS5_detector',\n",
    "                outdir_average='/Users/mrizzo/IFS/OS5/OS5_average',\n",
    "                pp_fact=0.00,\n",
    "                t_zodi=0.00,\n",
    "                subtract_ref_psf=False,\n",
    "                process_cubes=True,\n",
    "                process_offaxis=True,\n",
    "                process_detector=True,\n",
    "                take_averages=True,\n",
    "                parallel=False)\n",
    "np.savetxt(par.exportDir+\"/signal.txt\",signal)\n",
    "np.savetxt(par.exportDir+\"/noise.txt\",noise)\n",
    "np.savetxt(par.exportDir+\"/noiseleft.txt\",noiseleft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Reduced cube will have 19 wavelength bins\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3.3784598409324174"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\njIyU3W5XvXr1NHv2bF6/VTRmzBhNnTpVw4YN082bNxUZGam2bdsyt9WQivm+9dZbiomJYX6rAZW9\ndj08PG57XG2/N1gMwzDu2tEAAACAe9QDfakGAAAAYBbFGQAAADCB4gwAAACYQHEGAAAATKA4AwAA\nACZQnAGgCsaOHasdO3Y4l+fNm6cOHTroxo0bznVhYWG6cOFCjRzv4sWLzpuw1JT8/HyNHz/+H+9/\n3rx5OnXqVLWOXVpaqoiIiHI3MgCAuo7iDABV0K1bNx0+fNi5vHfvXrVv314ZGRmSpKysLHl4eDhv\niFAX5ebmKjMz8x99T2Zmpv744w+1adOmWse2Wq0KDw/XkiVLqrUfALibHugboABAVYWEhCguLk6S\nlJOTIzc3N73wwgtKS0tTt27ddOjQIXXv3l2StH37dq1cuVJFRUUqLi5WTEyMvLy89M4772jr1q2S\npNTUVG3YsEHLly9XQkKCtm/fLofDobCwML377rvljv3nn39qxowZ+v3332WxWDRx4kR1795dixcv\nVk5OjrKyspSdna0hQ4Zo3LhxunnzpmbOnKmMjAw1bdpUFotF48eP18qVK3Xp0iVFRERoypQpKioq\nUmRkpH766Sd5e3tryZIlatiwYbljf/jhhxowYIAkKSkpSd9++61yc3N14cIFhYaGKjo6Wvv379fy\n5ctlGIbOnz+vPn36yMvLSzt37pQkJSQkyNfXV2FhYYqJidH48eOddw4EgLqMM84AUAVPPfWUzp8/\nr+LiYqWlpSk0NFShoaFKS0uTJB06dEhhYWEqLS1VYmKili9fri1btujVV1/VihUrFBwcLKvVqh9/\n/FGStHXrVg0YMEB79uzRiRMntGnTJn3++efKycnRli1byh07NjZWgwcPVlJSkpYtW6YZM2aooKBA\nknT69GmtWLFCn3zyiRISEpSXl6fExERdv35dX3zxhebMmaPjx49LkqKiotSkSRPnWd/Lly9r7Nix\n2rp1q3x9fbVt27ZyxzUMQ7t371anTp2c644cOaJFixZpy5YtSk1N1enTpyVJR48e1Zw5c5SSkqLE\nxEQ1atRISUlJatWqlVJSUiRJNptNrVq10r59+2r6xwMALsEZZwCoApvNpvbt2+v48eNKS0vT8OHD\nFRAQoKKiIuXm5urIkSOaOnWqrFarlixZoq+//lrnzp3TgQMHZLX+fc5i4MCBSklJUUBAgA4cOKC4\nuDgtXLhQx44d08svvyxJKioqkr+/vzp27Og89t69e3X27FktWrRIklRSUuK8lrpr165yc3NT48aN\n5ePjo/z8fKWnpys8PFwWi0XNmjVTt27dKn1OTZo0Ubt27SRJLVq00JUrV8ptv7Vc9ja4HTp0cJ4t\nDggIUG5uriQpKChIfn5+kqSGDRs6j+nv76+8vDzn9/v7+ysrK+sf5w8AtYHiDABVdOs652PHjmnB\nggXOdbt27ZKPj4+8vLxUWFiowYMHa+DAgercubNatWqldevWSZL69eun0aNHKzg4WGFhYXJ3d5fD\n4dDo0aM1duxYSVJeXp5sNlu5EltaWqrVq1fLx8dH0t+Xivj6+mrnzp1yd3d3Ps5iscgwDNlsNpWW\nlv7X52O3/3tKuPW9ZVksFtlstnLrKjueJNWrV6/c4yp+X9lj3vpFAgDqOt6tAKCKQkJCtHnzZgUF\nBTlLZ2hoqFauXKnQ0FBJ0i+//CKr1arXX39dISEh2rNnjxwOhySpadOm8vPzU0JCgvO64Vv7LCws\nVElJiSIiIvTll1/edtz169dLks6cOaMBAwbo+vXrdxxn9+7dtW3bNhmGoZycHB04cEAWi0V2u10l\nJSWmn2/Dhg1VWlpao/8J4+LFi2revHmN7Q8AXIniDABVFBQUpKtXryosLMy5LiQkRGfPnnUW5+Dg\nYLVu3Vp9+/bVoEGD5OHhoV9//dX5+IEDB+ry5cvq2rWrJKlXr156/vnnFR4ern79+ik4OFiDBg0q\nd9yoqCgdPXpU/fv3V2RkpObPn/8fP1wXHh6u+vXrq3///po8ebL8/f310EMPqXHjxvL399fIkSNN\nP+cePXro0KFDph//nzgcDp06dcr5IUoAqOssRsW/xQEA7iu7d++WYRjq2bOn8vPz9dJLL+nTTz91\nXurxT2RmZmrp0qXO66urY+fOncrIyNCkSZOqvS8AuBs44wwA97nAwEAlJCRo4MCBGjFihCZMmFCl\n0iz9fQbdz8+vRm6AsmnTJkVERFRrPwBwN3HGGQAAADCBM84AAACACRRnAAAAwASKMwAAAGACxRkA\nAAAwgeIMAAAAmEBxBgAAAEz4f+EcXBLwoqOcAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11be53850>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from crispy.tools.reduction import calculateWaveList\n",
    "signal = np.loadtxt(par.exportDir+\"/signal.txt\")\n",
    "noise = np.loadtxt(par.exportDir+\"/noise.txt\")\n",
    "lam_midpts,junk = calculateWaveList(par)\n",
    "wavelist = 770*np.linspace(1.-0.18/2.,1.+0.18/2.,45)\n",
    "SNR_spectrum(lam_midpts,signal,noise,lam_contrast=wavelist,outfolder=par.exportDir+\"/\",FWHM=2.*44./19.)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "test = fits.open('/local/data/nicolaus2/mrizzo/crispy/crispy/OS5/os5_spc_031_targetstar_IFS.fits')[1].data\n",
    "print(np.sum(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Read data from HDU 0 of /Users/mrizzo/IFS/OS5/offaxis/spc_offaxis_psf.fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SIMPLE  =                    T / Written by IDL:  Tue Feb 21 14:04:33 2017      \n",
       "BITPIX  =                  -64 / Number of bits per data pixel                  \n",
       "NAXIS   =                    3 / Number of data axes                            \n",
       "NAXIS1  =                  256 /Number of positions along axis 1                \n",
       "NAXIS2  =                  256 /Number of positions along axis 2                \n",
       "NAXIS3  =                   45 /Number of positions along axis 3                \n",
       "DATE    = '2017-02-17'         / Creation UTC (CCCC-MM-DD) date of FITS header  \n",
       "NLAM    =                   45 / Number of wavelengths                          \n",
       "LAM_C   =                 0.77 / Passband central wavelength in microns         \n",
       "LAM_MIN =               0.7007 / Minimum passband wavelength                    \n",
       "LAM_MAX =               0.8393 / Maximum passband wavelength                    \n",
       "PIXSIZE =             0.100000 / sampling in lam_c/D radians                    \n",
       "OFFSET  =              7.00000 / offset of star in lam_c/D radians              "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from crispy.tools.inputScene import adjust_krist_header\n",
    "from crispy.tools.image import Image\n",
    "offaxispsf= '/Users/mrizzo/IFS/OS5/offaxis/spc_offaxis_psf.fits'\n",
    "cube = Image(offaxispsf)\n",
    "cube.header\n",
    "adjust_krist_header(cube,lamc=770.)\n",
    "cube.header"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Noiseless processing to assess the systematics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "os5folder = '/local/data/nicolaus2/mrizzo/haystacks/for_gsfc/with_lowfc'\n",
    "offaxispsf= '/local/data/nicolaus2/mrizzo/haystacks/for_gsfc/spc_offaxis_psf.fits'\n",
    "mean_contrast = 1e-8\n",
    "signal,noise = process_SPC_IFS(par,os5folder,offaxispsf,mean_contrast=mean_contrast,\n",
    "                outdir_time_series = 'OS5/OS5_test',outdir_detector='OS5/OS5_test/OS5_detector',\n",
    "                outdir_average='OS5/OS5_test/OS5_average',\n",
    "                process_cubes=False,\n",
    "                process_offaxis=True,\n",
    "                process_detector=False,\n",
    "                process_noiseless=True,\n",
    "                take_averages=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# from astropy.io import fits\n",
    "# residual = fits.open(\"/local/data/nicolaus2/mrizzo/crispy/crispy/OS5/OS5_average/residual_flatfielded.fits\")[1].data\n",
    "# plt.imshow(np.sum(residual,axis=0),vmin=-2,vmax=2)\n",
    "# from crispy.tools.image import Image\n",
    "# out = Image(data=np.sum(residual,axis=0))\n",
    "# out.write(\"/local/data/nicolaus2/mrizzo/crispy/crispy/OS5/OS5_average/stack.fits\")\n",
    "print(not par.poisson)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Reduced cube will have 19 wavelength bins\n",
      "crispy - INFO - Reduced cube will have 19 wavelength bins\n",
      "1.72507497744\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nGRkAgIKCAsjlcrz88stIS0vD4cOHYbFYAAD9+/dHVFQUsrOzbX3DLe+p0+lgNpuxYMEC/Oc//7nr\nup988gkA4MqVK3j88ceh1+s7jPP+++/H3r17IQgCKioqcOLECchkMiiVSpjNZoe/3tDQUFitVrdO\nwigpKUF8fLzb3o+ISEwsnImInJScnIyamhpkZmbaHktLS8O1a9dshXNqaiqGDBmCRx99FE888QTU\najXKyspsr58+fTqqqqowfvx4AMCUKVPw85//HDNnzsTUqVORmpqKJ554os11ly1bhh9//BHTpk3D\nokWL8M4773S6uW7mzJnQaDSYNm0alixZgujoaPj5+SE8PBzR0dGYO3euw1/zxIkTcfLkSYdf3xmL\nxYLc3FzbJkoiIm8nE9r/LY6IiHqVQ4cOQRAETJ48GfX19ZgxYwb++c9/2lo9uiMvLw9//etfbf3V\nrti/fz9ycnLw2muvufxeRESewBVnIqJebvDgwcjOzsb06dMxZ84cLFy40KmiGWheQY+KinLLASjb\nt2/HggULXHofIiJP4oozEREREZEDuOJMREREROQAFs5ERERERA5g4UxERERE5AAWzkREREREDmDh\nTERERETkABbOREREREQO+P9oG4P2ZxxnNQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1121598d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from tools.inputScene import calc_contrast_Bijan\n",
    "from tools.reduction import calculateWaveList\n",
    "lam_midpts,junk = calculateWaveList(par)\n",
    "wavelist = 770*np.linspace(1.-0.18/2.,1.+0.18/2.,45)\n",
    "spectrum=calc_contrast_Bijan(wavelist)\n",
    "sns.set_style(\"whitegrid\")\n",
    "fig,ax = plt.subplots(figsize=(12,6))\n",
    "real_vals=calc_contrast_Bijan(wavelist)\n",
    "ax.plot(wavelist,real_vals,label='Original spectrum')\n",
    "ax.errorbar(lam_midpts,signal*np.mean(spectrum)/np.mean(signal),yerr=noise*np.mean(spectrum)/np.mean(signal),label='Recovered spectrum',fmt='o')\n",
    "from scipy import ndimage\n",
    "FWHM = 4.\n",
    "smooth = ndimage.filters.gaussian_filter1d(real_vals,FWHM/2.35,order=0,mode='constant')\n",
    "ax.plot(wavelist,smooth,'-',label='Gaussian-smoothed original spectrum w/ FWHM=%.0f bins' % FWHM)\n",
    "\n",
    "ax.set_xlabel('Wavelength (nm)')\n",
    "ax.set_ylabel('Contrast')\n",
    "ax.set_title('Star+planet')\n",
    "plt.legend()\n",
    "chisq = np.sum((signal*np.mean(spectrum)/np.mean(signal) - calc_contrast_Bijan(lam_midpts))**2/(noise*np.mean(spectrum)/np.mean(signal))**2)\n",
    "print chisq/len(signal)\n",
    "#fig.savefig(par.exportDir+'/Contrast%.0g.png' % mean_contrast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mean_contrast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from tools.image import Image\n",
    "from astropy.io import fits\n",
    "img = Image('/local/data/nicolaus2/mrizzo/crispy/code/OS5/OS5_test/OS5_average/average_ref_star_detector.fits')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "outdir_average='OS5/OS5_average'\n",
    "mf_name = outdir_average+'/matched_filter.fits'\n",
    "mf = Image(mf_name)\n",
    "#plt.imshow(mf.data[5,:,:])\n",
    "print(np.nansum(np.nansum(mf.data,axis=2),axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#cube = Image(outdir_average+'/residual.fits')\n",
    "flatfield = Image(par.exportDir+'/flatfield_red_optext.fits')\n",
    "# cube = Image(par.exportDir+'/average_ref_star_detector_red_optext.fits')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print flatfield.data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from tools.imgtools import bowtie\n",
    "ydim,xdim = cube.data[0].shape\n",
    "maskleft,maskright = bowtie(cube.data[0],ydim//2,xdim//2,openingAngle=65,clocking=-par.philens*180/np.pi,IWApix=6*0.77/0.6,OWApix=18*0.77/0.6,export='bowtie',twomasks=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "plt.imshow(cube.data[5,:,:]*maskleft)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pixstd = [np.nanstd(cube.data[i,:,:]*maskright) for i in range(cube.data.shape[0])]\n",
    "mf_npix = np.nansum(np.nansum(mf.data,axis=2),axis=1)\n",
    "pixstd*mf_npix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "lam = 0.77*u.um\n",
    "D = 2.34*u.m\n",
    "lamoD = (lam.to(u.m)/D).value*u.radian\n",
    "lamoD = lamoD.to(u.arcsec)\n",
    "print(lamoD)\n",
    "dist = 5./14.\n",
    "print(AU)\n",
    "0.257695*u.arcsec/lamoD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from unitTests import testCreateFlatfield\n",
    "testCreateFlatfield(par)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from IFS import reduceIFSMap\n",
    "fname = 'unitTestsOutputs/flatfield.fits'\n",
    "cube = reduceIFSMap(par,fname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "os5folder = '/local/data/nicolaus2/mrizzo/haystacks/for_gsfc/with_lowfc'\n",
    "offaxispsf= '/local/data/nicolaus2/mrizzo/haystacks/for_gsfc/spc_offaxis_psf.fits'\n",
    "mean_contrast = 1e-8\n",
    "from tools.postprocessing import SPC_IFS_systematics\n",
    "signal,noise,off = SPC_IFS_systematics(par,os5folder,offaxispsf,mean_contrast=mean_contrast,\n",
    "                outdir_time_series = 'OS5/OS5_test',outdir_detector='OS5/OS5_test/OS5_detector',\n",
    "                outdir_average='OS5/OS5_test/OS5_average',\n",
    "                process_cubes=False,\n",
    "                process_offaxis=True,\n",
    "                process_detector=True,\n",
    "                take_averages=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from tools.inputScene import calc_contrast\n",
    "from tools.reduction import calculateWaveList\n",
    "lam_midpts,junk = calculateWaveList(par)\n",
    "# wavelist = np.arange(min(lam_midpts),max(lam_midpts),3)\n",
    "wavelist = 770*np.linspace(1.-0.18/2.,1.+0.18/2.,45)\n",
    "spectrum=calc_contrast(wavelist,mean_contrast=mean_contrast)\n",
    "sns.set_style(\"whitegrid\")\n",
    "fig,ax = plt.subplots(figsize=(12,6))\n",
    "real_vals=calc_contrast(wavelist,mean_contrast=mean_contrast)\n",
    "ax.plot(wavelist,calc_contrast(wavelist,mean_contrast=mean_contrast),label='Original spectrum')\n",
    "#ax.errorbar(lam_midpts,(signal-off)*np.mean(spectrum)/np.mean(signal),yerr=noise*np.mean(spectrum)/np.mean(signal),label='Recovered spectrum',fmt='o')\n",
    "ax.plot(lam_midpts,(signal-off)*np.mean(spectrum)/np.mean(signal[1:-1]),'o',label='Recovered spectrum')\n",
    "from scipy import ndimage\n",
    "FWHM = 4.\n",
    "smooth = ndimage.filters.gaussian_filter1d(real_vals,FWHM/2.35,order=0,mode='constant')\n",
    "ax.plot(wavelist,smooth,'-',label='Gaussian-smoothed original spectrum w/ FWHM=%.0f bins' % FWHM)\n",
    "\n",
    "#ax.errorbar(lam_midpts,(signal),yerr=noise,label='Recovered spectrum',fmt='o')\n",
    "ax.set_xlabel('Wavelength (nm)')\n",
    "ax.set_ylabel('Contrast')\n",
    "ax.set_title('Planet, no star, no noise')\n",
    "plt.legend()\n",
    "chisq = np.sum((signal*np.mean(spectrum)/np.mean(signal[1:-1]) - calc_contrast(lam_midpts,mean_contrast=mean_contrast))**2/(noise*np.mean(spectrum)/np.mean(signal[1:-1]))**2)\n",
    "print chisq/len(signal)\n",
    "\n",
    "#fig.savefig(par.exportDir+'/Contrast%.0g.png' % mean_contrast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print(lam_midpts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "par.lenslet_wav = 660.\n",
    "par.makeHeader()\n",
    "offaxispsf= '/local/data/nicolaus2/mrizzo/haystacks/for_gsfc/spc_offaxis_psf.fits'\n",
    "mean_contrast = 1e-7\n",
    "from tools.postprocessing import SPC_process_offaxis_only\n",
    "signal,noise,off = SPC_process_offaxis_only(par,offaxispsf,mean_contrast=mean_contrast,\n",
    "                outdir_time_series = 'OS5/OS5_test',outdir_detector='OS5/OS5_test/OS5_detector',\n",
    "                outdir_average='OS5/OS5_test/OS5_average',\n",
    "                process_offaxis=True,\n",
    "                process_detector=True,\n",
    "                take_averages=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
