{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PISCES wavelength calibration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have PISCES VARIA calibration sets. We will show how to process them to build a new wavelength calibration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import glob\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "matplotlib.rcParams['image.origin'] = 'lower'\n",
    "matplotlib.rcParams['image.interpolation'] = 'nearest'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import crispy-related stuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "codefolder = '../../../../crispy'\n",
    "if codefolder not in sys.path: sys.path.append(codefolder)\n",
    "import logging as log\n",
    "from crispy.tools.initLogger import getLogger\n",
    "log = getLogger('main')\n",
    "from crispy.tools.image import Image\n",
    "from crispy.PISCESparams import Params\n",
    "codefolder = '../../../crispy'\n",
    "par = Params(codefolder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build wavelength calibration files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Building calibration files, placing results in ../../../crispy/ReferenceFiles/Calibra_170425/\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Initializing PSFlet location transformation coefficients\n",
      "crispy - INFO - Performing initial optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det615.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det615.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det625.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det625.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det635.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det635.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det645.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det645.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det655.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det655.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det665.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det665.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det675.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det675.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det685.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det685.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det695.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det695.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det705.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det705.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det715.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det715.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det725.0.fits\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det725.0.fits\n",
      "crispy - INFO - Saving wavelength solution to ../../../crispy/ReferenceFiles/Calibra_170425/lamsol.dat\n",
      "crispy - INFO - Computing wavelength values at pixel centers\n",
      "crispy - INFO - Making high-resolution PSFLet models\n",
      "crispy - INFO - Starting parallel computation\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Making polychrome cube\n",
      "crispy - INFO - Saving polychrome cube\n",
      "crispy - INFO - Saving wavelength calibration cube\n",
      "crispy - INFO - Total time elapsed: 489 s\n"
     ]
    }
   ],
   "source": [
    "# We need to run the calibration for the first time\n",
    "from crispy.tools.wavecal import buildcalibrations\n",
    "par.gaussian_hires=False # since par.gaussian_hires is False, it will attempt to make high-resolution PSFLets\n",
    "par.lamlist = np.arange(605.,730.,10)\n",
    "par.filelist = [par.wavecalDir+'det'+str(wav)+'.fits' for wav in par.lamlist]\n",
    "buildcalibrations(par,\n",
    "                    inspect=True,\n",
    "                    genwavelengthsol=True, # Compute wavelength at the center of all pixels\n",
    "                    makehiresPSFlets=True, # this requires very high SNR on the monochromatic frames\n",
    "                    makePolychrome=True,   # This is needed to use least squares extraction\n",
    "                    upsample=3,            # upsampling factor of the high-resolution PSFLets\n",
    "                    nsubarr=4,             # the detector is divided into nsubarr^2 regions for PSFLet averaging\n",
    "                    apodize=False,          # to match PSFlet spot locations, only use the inner circular part of the \n",
    "                                           #detector, hence discarding the corners of the detector where lenslets are \n",
    "                                           #distorted\n",
    "                  ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "('Wavelengths at midpoints for lstsq (nm): ', array([ 610.45454545,  621.36363636,  632.27272727,  643.18181818,\n",
      "        654.09090909,  665.        ,  675.90909091,  686.81818182,\n",
      "        697.72727273,  708.63636364,  719.54545455]))\n",
      "('Wavelengths at endpoints for lstsq (nm): ', array([ 605.        ,  615.90909091,  626.81818182,  637.72727273,\n",
      "        648.63636364,  659.54545455,  670.45454545,  681.36363636,\n",
      "        692.27272727,  703.18181818,  714.09090909,  725.        ]))\n",
      "crispy - INFO - Reduced cube will have 26 wavelength bins\n",
      "('Wavelengths at midpoints for optext (nm): ', array([ 607.30769231,  611.92307692,  616.53846154,  621.15384615,\n",
      "        625.76923077,  630.38461538,  635.        ,  639.61538462,\n",
      "        644.23076923,  648.84615385,  653.46153846,  658.07692308,\n",
      "        662.69230769,  667.30769231,  671.92307692,  676.53846154,\n",
      "        681.15384615,  685.76923077,  690.38461538,  695.        ,\n",
      "        699.61538462,  704.23076923,  708.84615385,  713.46153846,\n",
      "        718.07692308,  722.69230769]))\n",
      "('Wavelengths at endpoints for optext (nm): ', array([ 605.        ,  609.61538462,  614.23076923,  618.84615385,\n",
      "        623.46153846,  628.07692308,  632.69230769,  637.30769231,\n",
      "        641.92307692,  646.53846154,  651.15384615,  655.76923077,\n",
      "        660.38461538,  665.        ,  669.61538462,  674.23076923,\n",
      "        678.84615385,  683.46153846,  688.07692308,  692.69230769,\n",
      "        697.30769231,  701.92307692,  706.53846154,  711.15384615,\n",
      "        715.76923077,  720.38461538,  725.        ]))\n"
     ]
    }
   ],
   "source": [
    "#par.lamlist = np.arange(615.,720.,10)\n",
    "\n",
    "from crispy.tools.reduction import calculateWaveList\n",
    "lam_midpts,lam_endpts = calculateWaveList(par,method='lstsq')\n",
    "print('Wavelengths at midpoints for lstsq (nm): ',lam_midpts)\n",
    "print('Wavelengths at endpoints for lstsq (nm): ',lam_endpts)\n",
    "lam_midpts,lam_endpts = calculateWaveList(par,method='optext')\n",
    "print('Wavelengths at midpoints for optext (nm): ',lam_midpts)\n",
    "print('Wavelengths at endpoints for optext (nm): ',lam_endpts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Monochromatic updates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det685.0.fits\n",
      "crispy - INFO - Making copies of wavelength solution from ../../../crispy/ReferenceFiles/Calibra_170425//lamsol.dat\n",
      "crispy - INFO - Generating new wavelength solution\n",
      "crispy - INFO - Initializing transformation coefficients with previous values\n",
      "crispy - INFO - Performing final optimization of PSFlet location transformation coefficients for frame ../../../crispy/ReferenceFiles/Calibra_170425/det685.0.fits\n",
      "crispy - INFO - -0.02: x-shift from archival spot positions (pixels)\n",
      "crispy - INFO - 0.00: y-shift from archival spot positions (pixels)\n",
      "crispy - INFO - -0.00: rotation from archival spot positions (degrees)\n",
      "crispy - INFO - Overwriting old wavecal\n",
      "crispy - INFO - Don't forget to run buildcalibrations again with makePolychrome=True!\n",
      "crispy - INFO - Building calibration files, placing results in ../../../crispy/ReferenceFiles/Calibra_170425/\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det605.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det615.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det625.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det635.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det645.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det655.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det665.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det675.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det685.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det695.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det705.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det715.0.fits\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det725.0.fits\n",
      "crispy - INFO - Loading wavelength solution from ../../../crispy/ReferenceFiles/Calibra_170425/lamsol.dat\n",
      "crispy - INFO - Computing wavelength values at pixel centers\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Making polychrome cube\n",
      "crispy - INFO - Saving polychrome cube\n",
      "crispy - INFO - Saving wavelength calibration cube\n",
      "crispy - INFO - Total time elapsed: 34 s\n"
     ]
    }
   ],
   "source": [
    "from crispy.tools.wavecal import monochromatic_update\n",
    "from crispy.tools.image import Image\n",
    "# let's pretend that we got a new file\n",
    "# inImage = Image(par.codeRoot+\"/Inputs/Flat637.fits\")\n",
    "# inLam = 637.\n",
    "inImage = Image(par.wavecalDir+'det685.0.fits')\n",
    "inLam=685.\n",
    "\n",
    "# this adjusts the wavecal\n",
    "monochromatic_update(par,inImage,inLam,apodize=True)\n",
    "# but you still have to re-run buildcalibrations each time\n",
    "from crispy.tools.wavecal import buildcalibrations\n",
    "par.gaussian_hires=False # since par.gaussian_hires is False, it will attempt to make high-resolution PSFLets\n",
    "par.lamlist = np.arange(605.,730.,10)\n",
    "par.filelist = [par.wavecalDir+'det'+str(wav)+'.fits' for wav in par.lamlist]\n",
    "par.npixperdlam=0.8\n",
    "buildcalibrations(par,\n",
    "                    inspect=True,\n",
    "                    genwavelengthsol=False, # already done before\n",
    "                    makehiresPSFlets=False, # already done\n",
    "                    makePolychrome=True, # update the polychrome with the new wavecal!\n",
    "                    upsample=3,\n",
    "                    nsubarr=4\n",
    "                 )\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/Inputs/Flat637.fits\n",
      "crispy - INFO - Reduced cube will have 26 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/Flat637_red_optext.fits\n",
      "crispy - INFO - Elapsed time: 1.665145s\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/Inputs/Flat637.fits\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/Flat637_red_lstsq.fits\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/Flat637_red_lstsq_resid.fits\n",
      "crispy - INFO - Elapsed time: 3.633935s\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/Inputs/BB.fits\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/BB_red_lstsq.fits\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/BB_red_lstsq_resid.fits\n",
      "crispy - INFO - Elapsed time: 3.638405s\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/Inputs/BB.fits\n",
      "crispy - INFO - Reduced cube will have 26 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/BB_red_optext.fits\n",
      "crispy - INFO - Elapsed time: 1.373764s\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det655.0.fits\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/det655_red_lstsq.fits\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/det655_red_lstsq_resid.fits\n",
      "crispy - INFO - Elapsed time: 3.587671s\n",
      "crispy - INFO - Read data from HDU 1 of ../../../crispy/ReferenceFiles/Calibra_170425/det655.0.fits\n",
      "crispy - INFO - Reduced cube will have 11 wavelength bins\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/20170501-160552_red_lstsq.fits\n",
      "crispy - INFO - Writing data to ../../../crispy/SimResults/20170501-160552_red_lstsq_resid.fits\n",
      "crispy - INFO - Elapsed time: 3.569305s\n"
     ]
    }
   ],
   "source": [
    "from crispy.IFS import reduceIFSMap\n",
    "from crispy.tools.image import Image\n",
    "\n",
    "cube = reduceIFSMap(par,par.codeRoot+\"/Inputs/Flat637.fits\",method='optext',smoothbad=True) # smoothbad=True is the default\n",
    "cube = reduceIFSMap(par,par.codeRoot+\"/Inputs/Flat637.fits\",method='lstsq')\n",
    "cube = reduceIFSMap(par,par.codeRoot+\"/Inputs/BB.fits\",method='lstsq')\n",
    "cube = reduceIFSMap(par,par.codeRoot+\"/Inputs/BB.fits\",method='optext')\n",
    "cube = reduceIFSMap(par,par.wavecalDir+\"det655.0.fits\",method='lstsq')\n",
    "\n",
    "# reduce an array directly instead of a FITS file\n",
    "cube_array = Image(filename= par.wavecalDir+\"det655.0.fits\").data\n",
    "\n",
    "# now cube_array is a simple 2D array. Function is the same, but the argument is changed from a string to an array.\n",
    "# You can also specify name=\"my_name\" in the arguments, and it will output a file called \"my_name_red_optext.fits\"\n",
    "# If name is unspecified, it creates a file with the date and time as a base, result of the function\n",
    "# time.strftime(\"%Y%m%d-%H%M%S\")\n",
    "cube = reduceIFSMap(par,cube_array,method='lstsq')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Construct lenslet bad pixel/flatfield from broadband reduced cube"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following only works if the reduced cube is first done WITHOUT already correcting for lenslet flatfield. To do this, run the but only AFTER running deleting the keywords in the parameters class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from crispy.IFS import reduceIFSMap\n",
    "\n",
    "if hasattr(par,'lenslet_flat'): del par.lenslet_flat\n",
    "if hasattr(par,'lenslet_mask'): del par.lenslet_mask\n",
    "cube = reduceIFSMap(par,par.codeRoot+\"/Inputs/BB.fits\",method='lstsq',smoothbad=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from crispy.tools.imgtools import gen_lenslet_flat\n",
    "BBcube = Image(par.exportDir+\"/BB_red_lstsq.fits\")\n",
    "lenslet_flat,lenslet_mask = gen_lenslet_flat(BBcube)\n",
    "Image(data = lenslet_flat).write(par.exportDir+\"/lenslet_flat.fits\")\n",
    "Image(data = lenslet_mask).write(par.exportDir+\"/lenslet_mask.fits\")\n",
    "plt.figure(figsize=(15,15))\n",
    "plt.imshow(lenslet_flat*lenslet_mask, cmap='gist_heat')\n",
    "plt.colorbar()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you are satisfied with the flatfielding and masking, move the two fits files into the wavecal directory and reduce things with the two class attributes defined. When you reload the parameter file, the two attributes automatically get reset."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
